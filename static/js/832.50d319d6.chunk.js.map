{"version":3,"file":"static/js/832.50d319d6.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Phonebook/ContactForm/ContactForm.module.css?f727","components/Phonebook/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Phonebook/phonebook.module.css?5245","components/Phonebook/ContactList/ContactList.jsx","redux/filter/filter-selectors.js","components/Phonebook/Filter/Filter.jsx","components/Phonebook/Phonebook.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__xMklr\",\"label\":\"ContactForm_label__YXYvo\",\"button\":\"ContactForm_button__nVfZI\"};","import { useState } from 'react';\n\n\nimport css from 'components/Phonebook/ContactForm/ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nimport { getAllContacts } from 'redux/contacts/contacts-selectors';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const [state, setState] = useState(INITIAL_STATE);\n  const dispatch = useDispatch();\n  const AllContacts = useSelector(getAllContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const data = state;\n\n    const normalizedName = data.name.toLowerCase();\n    const isRepeatedContact = AllContacts.some(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n    if (isRepeatedContact) {\n      const alertString = data.name + ' is already in contacts.';\n      alert(alertString);\n      return;\n    }\n    dispatch(addContact({ ...data }));\n    setState(INITIAL_STATE);\n  };\n\n  return (\n    <>\n      <div>\n        Phonebook\n      </div>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label className={css.label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={state.name}\n            onChange={handleChange}\n          />\n        </label>\n        <label className={css.label}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={state.number}\n            onChange={handleChange}\n          />\n        </label>\n        <button className={css.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    \n    </>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"phonebook_wrapper__MfQ3k\",\"list\":\"phonebook_list__rE2pQ\",\"button\":\"phonebook_button__Eyg+r\",\"buttonWrapper\":\"phonebook_buttonWrapper__rgE61\",\"title\":\"phonebook_title__wIGm2\",\"btn\":\"phonebook_btn__hf3rN\",\"btnDel\":\"phonebook_btnDel__frk2j\",\"contact\":\"phonebook_contact__ZuVSL\",\"text\":\"phonebook_text__S15cN\"};","import { useSelector, useDispatch } from 'react-redux';\n\n\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selectors';\n\nimport css from 'components/Phonebook/phonebook.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  const onDeleteContact = idForDelete => {\n    dispatch(deleteContact(idForDelete));\n  };\n\n  return (\n    <>\n      <div>\n        Contacts\n      </div>\n\n      <div\n      >\n        <ul>\n          {contacts.map(({ id, name, number }) => (\n            <li className={css.list} key={id} >\n              <p >\n                {name} {number}\n              </p>\n              <button\n                className={css.button}\n                type=\"button\"\n              \n                onClick={() => onDeleteContact(id)}\n              >\n                <div >Delete</div>\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default ContactList;","export const getFilter = ({ filter }) => filter;\n","import { useSelector, useDispatch } from 'react-redux';\n\n\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { getFilter } from 'redux/filter/filter-selectors';\n\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <>\n      <div\n        noValidate\n        autoComplete=\"off\"\n      >\n        <div>\n          {' '}\n          <input\n            id=\"outlined-filter-input\"\n            label=\"Find a contact by name\"\n            type=\"text\"\n            name=\"filter\"\n            required\n            value={filter}\n            onChange={handleChange}\n            color=\"secondary\"\n          />\n        </div>\n      </div>\n     \n    </>\n  );\n};\n\nexport default Filter;\n\n\n","import { useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport LinearIndeterminate from 'services/LinearIndeterminate';\nimport ContactForm from 'components/Phonebook/ContactForm/ContactForm';\nimport ContactList from 'components/Phonebook/ContactList/ContactList';\nimport Filter from 'components/Phonebook/Filter/Filter';\n\n\nimport {\n  getFilteredContacts,\n  getIsLoading,\n  getError,\n} from 'redux/contacts/contacts-selectors';\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = useSelector(getFilteredContacts);\n  const isContacts = Boolean(filteredContacts.length);\n\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      {isLoading && !error && <LinearIndeterminate />}\n      {isContacts && <ContactList />}\n      {!isContacts && !isLoading && <p>No contacts in the list</p>}\n    </div>\n  );\n};\n\nexport default Phonebook;\n","import Phonebook from 'components/Phonebook/Phonebook';\n\n\nexport default function Contacts() {\n  return (\n\n      <Phonebook />\n   \n  );\n}\n"],"names":["INITIAL_STATE","name","number","useState","state","setState","dispatch","useDispatch","AllContacts","useSelector","getAllContacts","handleChange","e","target","value","prevState","className","css","onSubmit","evt","preventDefault","data","normalizedName","toLowerCase","some","contact","alertString","alert","addContact","type","pattern","title","required","onChange","contacts","getFilteredContacts","map","id","onClick","idForDelete","deleteContact","getFilter","filter","noValidate","autoComplete","label","setFilter","currentTarget","color","isLoading","getIsLoading","error","getError","useEffect","fetchContacts","filteredContacts","isContacts","Boolean","length","LinearIndeterminate","Contacts"],"sourceRoot":""}